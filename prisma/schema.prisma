generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
  runtime  = "vercel-edge"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  type              String
  provider          String
  providerAccountId String    @map("provider_account_id")
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  studentId     String?   @unique
  staffId       String?   @unique
  firstName     String?
  middleName    String?
  lastName      String?
  email         String?   @unique
  phoneNumber   String?
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  accounts Account[]
  sessions Session[]

  // Relations
  announcements             Announcement[]       @relation("CreatedAnnouncements")
  defenseSchedulesCreated   DefenseSchedule[]    @relation("CreatedByRelation")
  defenseSchedulesUpdated   DefenseSchedule[]    @relation("UpdatedByRelation")
  defenseSchedulesAsStudent DefenseSchedule[]    @relation("StudentRelation")
  defenseSchedulesAsFaculty DefenseSchedule[]    @relation("FacultyRelation")
  defenseRequirements       DefenseRequirement[] @relation("OwnerDefenseRequirements")

  adviseesAsAdviser Advisee[] @relation("AdviserRelation")
  adviseesAsStudent Advisee[] @relation("StudentRelation")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String
  files     String[]  @default([])
  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  creator User @relation("CreatedAnnouncements", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model DefenseSchedule {
  id           String   @id @default(cuid())
  studentId    String
  facultyId    String
  date         DateTime
  time         String
  status       String   @default("PENDING")
  requirements String[] @default([])
  createdBy    String
  updatedBy    String?

  // Relation aliases to avoid Prisma confusion
  student     User  @relation("StudentRelation", fields: [studentId], references: [id], onDelete: Cascade)
  faculty     User  @relation("FacultyRelation", fields: [facultyId], references: [id], onDelete: Cascade)
  createdUser User  @relation("CreatedByRelation", fields: [createdBy], references: [id], onDelete: Cascade)
  updatedUser User? @relation("UpdatedByRelation", fields: [updatedBy], references: [id])

  defenseRequirements DefenseRequirement[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("defense_schedules")
}

model DefenseRequirement {
  id        String @id @default(cuid())
  title     String
  file      String
  ownerId   String
  defenseId String

  owner   User            @relation("OwnerDefenseRequirements", fields: [ownerId], references: [id], onDelete: Cascade)
  defense DefenseSchedule @relation(fields: [defenseId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("defense_requirements")
}

model Advisee {
  id        String        @id @default(cuid())
  adviserId String
  studentId String
  status    AdviseeStatus @default(PENDING)

  adviser User @relation("AdviserRelation", fields: [adviserId], references: [id], onDelete: Cascade)
  student User @relation("StudentRelation", fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("advisees")
}

enum Role {
  STUDENT
  FACULTY
  STAFF
  ADMIN
}

enum AdviseeStatus {
  PENDING
  ACTIVE
  INACTIVE
}
