generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
  runtime  = "vercel-edge"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  type              String
  provider          String
  providerAccountId String    @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id                        String                 @id @default(cuid())
  studentId                 String?                @unique
  staffId                   String?                @unique
  firstName                 String?
  middleName                String?
  lastName                  String?
  email                     String?                @unique
  password                  String?
  emailVerified             DateTime?              @map("email_verified")
  image                     String?
  role                      Role                   @default(STUDENT)
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime?              @updatedAt
  phoneNumber               String?
  accounts                  Account[]
  adviseeMemberships        AdviseeMember[]        @relation("AdviseeMembersUser")
  adviseesAsAdviser         Advisee[]              @relation("AdviserRelation")
  adviseesAsStudent         Advisee[]              @relation("StudentRelation")
  announcements             Announcement[]         @relation("CreatedAnnouncements")
  defenseFacultyMemberships DefenseFacultyMember[]
  defenseRequirements       DefenseRequirement[]   @relation("OwnerDefenseRequirements")
  defenseSchedulesCreated   DefenseSchedule[]      @relation("CreatedByRelation")
  defenseSchedulesAsStudent DefenseSchedule[]      @relation("StudentRelation")
  defenseSchedulesUpdated   DefenseSchedule[]      @relation("UpdatedByRelation")
  facultyDocuments          FacultyDocument[]
  sessions                  Session[]

  @@map("users")
}

model Announcement {
  id         String             @id @default(cuid())
  title      String
  content    String
  files      String[]           @default([])
  createdBy  String
  status     AnnouncementStatus @default(VISIBLE)
  expiryDate DateTime?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime?          @updatedAt
  creator    User               @relation("CreatedAnnouncements", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model DefenseSchedule {
  id                  String                    @id @default(cuid())
  studentId           String
  date                DateTime
  time                String
  createdBy           String
  updatedBy           String?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime?                 @updatedAt
  category            DefenseCategory
  status              DefenseStatus             @default(PENDING)
  facultyMemberships  DefenseFacultyMember[]
  requiredDocuments   DefenseRequiredDocument[] @relation("ScheduleRequiredDocuments")
  defenseRequirements DefenseRequirement[]
  createdUser         User                      @relation("CreatedByRelation", fields: [createdBy], references: [id], onDelete: Cascade)
  student             User                      @relation("StudentRelation", fields: [studentId], references: [id], onDelete: Cascade)
  updatedUser         User?                     @relation("UpdatedByRelation", fields: [updatedBy], references: [id])

  @@map("defense_schedules")
}

model DefenseRequirement {
  id        String          @id @default(cuid())
  title     String
  file      String
  ownerId   String
  defenseId String
  createdAt DateTime        @default(now())
  updatedAt DateTime?       @updatedAt
  defense   DefenseSchedule @relation(fields: [defenseId], references: [id], onDelete: Cascade)
  owner     User            @relation("OwnerDefenseRequirements", fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("defense_requirements")
}

model DefenseRequiredDocument {
  id          String          @id @default(cuid())
  defenseId   String
  name        String
  category    DefenseCategory
  description String?
  isMandatory Boolean         @default(true)
  defense     DefenseSchedule @relation("ScheduleRequiredDocuments", fields: [defenseId], references: [id], onDelete: Cascade)

  @@map("defense_required_documents")
}

model DefenseFacultyMember {
  defenseId String
  facultyId String
  defense   DefenseSchedule @relation(fields: [defenseId], references: [id], onDelete: Cascade)
  faculty   User            @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  @@id([defenseId, facultyId])
  @@map("defense_faculty_members")
}

model Advisee {
  id        String          @id @default(cuid())
  adviserId String
  studentId String
  createdAt DateTime        @default(now())
  updatedAt DateTime?       @updatedAt
  status    AdviseeStatus   @default(PENDING)
  members   AdviseeMember[] @relation("AdviseeMembers")
  adviser   User            @relation("AdviserRelation", fields: [adviserId], references: [id], onDelete: Cascade)
  student   User            @relation("StudentRelation", fields: [studentId], references: [id], onDelete: Cascade)

  @@map("advisees")
}

model AdviseeMember {
  id        String     @id @default(cuid())
  adviseeId String
  memberId  String
  type      MemberType
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  advisee   Advisee    @relation("AdviseeMembers", fields: [adviseeId], references: [id], onDelete: Cascade)
  member    User       @relation("AdviseeMembersUser", fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([adviseeId, memberId])
  @@map("advisee_members")
}

model FacultyDocument {
  id        String           @id @default(cuid())
  facultyId String
  category  DocumentCategory
  fileUrl   String
  remarks   String?
  status    DocumentStatus   @default(NONE)
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt
  faculty   User             @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  @@unique([facultyId, category])
  @@map("faculty_documents")
}

enum Role {
  STUDENT
  FACULTY
  STAFF
  ADMIN
}

enum DefenseCategory {
  TITLE
  FINAL
}

enum DefenseStatus {
  PENDING
  APPROVED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum DocumentCategory {
  SYLLABUS_ACCEPTANCE_FORM
  TOS_MIDTERM
  TOS_FINALS
  RUBRICS_MIDTERM
  RUBRICS_FINALS
  EXAMINATIONS_MIDTERM
  EXAMINATIONS_FINALS
  GRADING_SHEET
  RECORD
  STUDENT_OUTPUT
  CLASS_RECORD
  PORTFOLIO
}

enum DocumentStatus {
  NONE
  SUBMITTED
  REVISED
  APPROVED
}

enum AdviseeStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum MemberType {
  LEADER
  MEMBER
}

enum AnnouncementStatus {
  VISIBLE
  HIDDEN
}
